{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
  // }
  "component": {
    "prefix": "component",
    "body": [
      "import * as React from 'react';",
      "\r",
      "interface I${1:ComponentName}Props {",
      "\treadonly template: string;",
      "}",
      "\r",
      "interface I${1:ComponentName}State {",
      "\treadonly isCool: boolean;",
      "}",
      "\r",
      "const initial${1:ComponentName}State: I${1:ComponentName}State = {",
      "\tisCool: true,",
      "};",
      "\r",
      "export default class ${1:ComponentName} extends React.PureComponent<I${1:ComponentName}Props, I${1:ComponentName}State> {",
      "\tpublic static readonly defaultProps: Partial<I${1:ComponentName}Props> = {",
      "\t\ttemplate: 'Bro!',",
      "\t};",
      "\r",
      "\tpublic constructor(props: I${1:ComponentName}Props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = initial${1:ComponentName}State;",
      "\t}",
      "\r",
      "\tpublic render(): JSX.Element {",
      "\t\treturn <div>Hello ${1:ComponentName}</div>;",
      "\t}",
      "}"
    ],
    "description": "[Sandstorm] Create a new Component."
  },
  "container": {
    "prefix": "container",
    "body": [
      "import * as React from 'react';",
      "import {connect} from 'react-redux';",
      "import {Dispatch} from 'redux';",
      "import {actions, IApplicationState, selectors} from '../../Redux/Store';",
      "\r",
      "const mapStateToProps = (state: IApplicationState) => ({});",
      "\r",
      "const mapDispatchToProps = (dispatch: Dispatch) => ({});",
      "\r",
      "type ${1:ContainerName}Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;",
      "\r",
      "class ${1:ContainerName} extends React.PureComponent<${1:ContainerName}Props> {",
      "\tpublic render(): JSX.Element {",
      "\t\treturn <React.Fragment>Hello ${1:ContainerName}!</React.Fragment>;",
      "\t}",
      "}",
      "\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:ContainerName});"
    ],
    "description": "[Sandstorm] Create a new Container."
  },
  "storybook story": {
    "prefix": "story",
    "body": [
      "import { action } from '@storybook/addon-actions';",
      "import { storiesOf } from '@storybook/react';",
      "import * as React from 'react';",
      "import ${1:ComponentName} from '.';",
      "\r",
      "storiesOf('${1:ComponentName}', module)",
      "\t.add('${2:TestCaseName}', () => (",
      "\t\t<${1:ComponentName} />",
      "\t));"
    ],
    "description": "[Sandstorm] Create a new Story for Storybook."
  },
  "component test": {
    "prefix": "test",
    "body": [
      "import * as React from 'react';",
      "import {render} from 'react-dom';",
      "import * as ReactTestRenderer from 'react-test-renderer';",
      "import ${1:ComponentName} from '.';",
      "\r",
      "describe('${1:ComponentName} tests', () => {",
      "\tit('should render without crashing', () => {",
      "\t\trender(<${1:ComponentName}/>, document.createElement('div'));",
      "\t});",
      "\r",
      "\tit('should match snapshot', () => {",
      "\t\texpect(ReactTestRenderer.create(<${1:ComponentName}/>)).toMatchSnapshot();",
      "\t});",
      "});"
    ],
    "description": "[Sandstorm] Create a new Component Test."
  }
}
